@model VendorManagementSystem.ProjectViewModel.ProductUploadView
@using VendorManagementSystem.ProjectViewModel

@{
    ViewBag.Title = "ProductUploadMethod";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css" type="text/css" rel="Stylesheet" />
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js" type="text/javascript"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
<!DOCTYPE html>
<html>
 <head>
     <link href="~/Content/Margin.css" rel="stylesheet" />
     <style>
         #btn{
             background-color:lightgrey;
         }
         #p{
             margin-left:1000px;
             margin-top:20px;
         }
     </style>
 </head>

<body>
    <ol class="breadcrumb">
        <li>@Html.ActionLink("VendorHome", "Index", "VendorAccess", routeValues: null, htmlAttributes: new { id = "registerLink" })</li>
        <li class="active">ProductUploadMethod</li>
    </ol>

    <table id="p">
        <tr>
            <td>
                @Html.ActionLink("Show List", "VendorList")
            </td>
        </tr>
    </table>

    <div id="mrgn">
        <h2>
            Add product
        </h2>
        
        <div>
            <h5>#All Star(*) marked fields are required. </h5>
            <h5>#Please Upload only jpg file.</h5>
            <h5>#Price must be numeric value only must not be greater than 8 digits.</h5>
        </div>

    </div>
    <div id="bdymrgn">
        @using (Html.BeginForm("ProductUploadMethod", "VendorAccess", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
           @Html.AntiForgeryToken()

               <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductName,"Product Name", htmlAttributes: new { @class = "control-label col-md-4", @id = "lname" })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger"})
                     <div class="col-md-10" id="disfromlabel">
                        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", MaxLength = "30", @id = "numb" } })
                       
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductPrice, "Product Price",htmlAttributes: new { @class = "control-label col-md-4"})
                    @Html.ValidationMessageFor(model => model.ProductPrice, "*", new { @class = "text-danger" })
                     <div class="col-md-10" id="disfromlabel">
                        @Html.EditorFor(model => model.ProductPrice, new { htmlAttributes = new { @class = "form-control", MaxLength = "12", @id = "alpha1" } })
                       
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductQuantity, "Product Quantity", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.ValidationMessageFor(model => model.ProductQuantity, "*", new { @class = "text-danger" })
               
                    <div class="col-md-10" id="disfromlabel">
                        @Html.TextBoxFor(model => model.ProductQuantity, new { htmlAttributes = new { @class = "form-control", @id = "alpha2"} })
                    </div>   
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductDescription,"Description", htmlAttributes: new { @class = "control-label col-md-4"})
                    @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
                     <div class="col-md-10" id="disfromlabel">
                        @Html.EditorFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control", MaxLength = "40" } })
                       
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductImage,"Product Image", htmlAttributes: new { @class = "control-label col-md-4"})
                    @Html.ValidationMessageFor(model => model.ProductImage, "*", new { @class = "text-danger" })
                     <div class="col-md-10" id="disfromlabel">
                         @Html.TextBox("file", "", new { type = "file" })
                    </div>
                </div>

                   <div class="form-group">
                       @Html.LabelFor(model => model.SellingCategory , "Selling Category", htmlAttributes: new { @class = "control-label col-md-4" })
                       @Html.ValidationMessageFor(model => model.SellingCategory, "", new { @class = "text-danger" })
                       <div class="col-md-10" id="disfromlabel">
                           @Html.DropDownListFor(model => model.SellingCategory, new SelectList(Enum.GetValues(typeof(Sellingcategory))), "--Select Product Category--", new { htmlAttributes = new { @class = "form-control" } })

                       </div>
                   </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" id="btn" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
</div>

</body>
</html>

<script>
//For not accepting numeric values
               $( document ).ready(function() {
                   $("#numb").keypress(function (e) {
                       var key = e.which;
                       if (key >= 48 && key <= 57) {
                           e.preventDefault();
                       }
                   });

                   $("#alpha1").keydown(function (e) {
                       var key = e.which;
                       if (key >= 65 && key <= 90) {
                           e.preventDefault();
                       }
                   });
               });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
